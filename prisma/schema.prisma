generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name  String?
  email String  @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  authToken   AuthToken?
  Participant Participant[]

  @@map("users")
}

model AuthToken {
  id String @id @default(uuid())

  code String

  user    User   @relation(fields: [user_id], references: [id])
  user_id String @unique

  created_at DateTime @default(now())

  @@map("auth_tokens")
}

model Trip {
  id           String   @id @default(uuid())
  destination  String
  starts_at    DateTime
  ends_at      DateTime
  is_confirmed Boolean  @default(false)
  created_at   DateTime @default(now())

  participants Participant[]
  activities   Activity[]
  links        Link[]
  invites      Invite[]

  @@map("trips")
}

model Invite {
  id String @id @default(uuid())

  email String

  trip_id String
  trip    Trip   @relation(fields: [trip_id], references: [id])

  @@unique([email, trip_id])
  @@map("invites")
}

model Participant {
  id String @id @default(uuid())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  is_owner     Boolean @default(false)
  is_confirmed Boolean @default(false)

  trip_id String
  trip    Trip   @relation(fields: [trip_id], references: [id])

  @@unique([user_id, trip_id])
  @@map("participants")
}

model Activity {
  id        String   @id @default(uuid())
  title     String
  occurs_at DateTime

  trip_id String
  trip    Trip   @relation(fields: [trip_id], references: [id])

  @@map("activities")
}

model Link {
  id    String @id @default(uuid())
  title String
  url   String

  trip_id String
  trip    Trip   @relation(fields: [trip_id], references: [id])

  @@map("links")
}
